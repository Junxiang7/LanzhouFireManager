using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace WebDemo.Lib
{

    public class Utils
    {
        /// <summary>
        /// 读取文件路径
        /// </summary>
        /// <param name="strPath"></param>
        /// <returns></returns>
        public static string GetMapPath(string strPath)
        {
            if (HttpContext.Current != null)
            {
                return HttpContext.Current.Server.MapPath(strPath);
            }
            strPath = strPath.Replace("/", @"\");
            if (strPath.StartsWith(@"\"))
            {
                strPath = strPath.Substring(strPath.IndexOf('\\', 1)).TrimStart(new char[] { '\\' });
            }
            return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, strPath);
        }
        /// <summary>
        /// 文件路径
        /// </summary>
        /// <param name="filepath">文件路径</param>
        public static void CreatrPath(string filepath)
        {
            string path = Path.GetDirectoryName(filepath);
            if (!Directory.Exists(path))//判断是否存在
            {

                Directory.CreateDirectory(path);//创建新路径
            }
        }
        /// <summary>
        /// 返回十六进制代表的字符串
        /// </summary>
        /// <param name="mHex"></param>
        /// <returns></returns>
        public static byte[] HexToStr(string mHex) // 
        {
            mHex = mHex.Replace(" ", "").Replace("\r\n", "");
            if (mHex.Length <= 0) return new byte[] { };
            byte[] vBytes = new byte[mHex.Length / 2];
            for (int i = 0; i < mHex.Length; i += 2)
                if (!byte.TryParse(mHex.Substring(i, 2), NumberStyles.HexNumber, null, out vBytes[i / 2]))
                    vBytes[i / 2] = 0;
            return vBytes;
        }
        /// <summary> 
        /// 字节数组转16进制字符串 
        /// </summary> 
        /// <param name="bytes"></param> 
        /// <returns></returns> 
        public static string byteToHexStr(byte[] bytes)
        {
            string returnStr = "";
            if (bytes != null)
            {
                for (int i = 0; i < bytes.Length; i++)
                {
                    returnStr += bytes[i].ToString("X2") + "";
                }
            }
            return returnStr;
        }
        /// <summary>
        /// 汇付密码解密
        /// </summary>
        /// <param name="decodepwd"></param>
        /// <returns></returns>
        public static string ChinapnrDecode(string decodepwd)
        {
            string result = "";
            try
            {
                byte[][] data =
                          new byte[][]{
                        new byte[]{42,43,40,41,46,47,44,45,34,0,32,33,38,39,36,37,58,59,56,57,62,63,0,61,50,51,48,49,54,55,52,53,10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,26,27,24,25,30,31,28,29,18,19,16,17,22,23,20,21,106,107,104,105,110,111,108,109,98,99,96,97,102,103,100,101,122,123,120,121,126,127,124,125,114,115,112,113,118,119,116,117,74,75,72,73,78,79,76,77,66,67,64,65,70,71,68,69,90,91,88,89,94,95,92,93,82,83,80,81,86,87,84,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{43,42,41,40,47,46,45,44,0,34,33,32,39,38,37,36,59,58,57,56,63,62,61,0,51,50,49,48,55,54,53,52,11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,27,26,25,24,31,30,29,28,19,18,17,16,23,22,21,20,107,106,105,104,111,110,109,108,99,98,97,96,103,102,101,100,123,122,121,120,127,126,125,124,115,114,113,112,119,118,117,116,75,74,73,72,79,78,77,76,67,66,65,64,71,70,69,68,91,90,89,88,95,94,93,92,83,82,81,80,87,86,85,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{49,48,51,50,53,52,55,54,57,56,59,58,61,0,63,62,33,32,0,34,37,36,39,38,41,40,43,42,45,44,47,46,17,16,19,18,21,20,23,22,25,24,27,26,29,28,31,30,1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,113,112,115,114,117,116,119,118,121,120,123,122,125,124,127,126,97,96,99,98,101,100,103,102,105,104,107,106,109,108,111,110,81,80,83,82,85,84,87,86,89,88,91,90,93,92,95,94,65,64,67,66,69,68,71,70,73,72,75,74,77,76,79,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{55,54,53,52,51,50,49,48,63,62,61,0,59,58,57,56,39,38,37,36,0,34,33,32,47,46,45,44,43,42,41,40,23,22,21,20,19,18,17,16,31,30,29,28,27,26,25,24,7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,119,118,117,116,115,114,113,112,127,126,125,124,123,122,121,120,103,102,101,100,99,98,97,96,111,110,109,108,107,106,105,104,87,86,85,84,83,82,81,80,95,94,93,92,91,90,89,88,71,70,69,68,67,66,65,64,79,78,77,76,75,74,73,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{59,58,57,56,63,62,61,0,51,50,49,48,55,54,53,52,43,42,41,40,47,46,45,44,0,34,33,32,39,38,37,36,27,26,25,24,31,30,29,28,19,18,17,16,23,22,21,20,11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,123,122,121,120,127,126,125,124,115,114,113,112,119,118,117,116,107,106,105,104,111,110,109,108,99,98,97,96,103,102,101,100,91,90,89,88,95,94,93,92,83,82,81,80,87,86,85,84,75,74,73,72,79,78,77,76,67,66,65,64,71,70,69,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{69,68,71,70,65,64,67,66,77,76,79,78,73,72,75,74,85,84,87,86,81,80,83,82,93,92,95,94,89,88,91,90,101,100,103,102,97,96,99,98,109,108,111,110,105,104,107,106,117,116,119,118,113,112,115,114,125,124,127,126,121,120,123,122,5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10,21,20,23,22,17,16,19,18,29,28,31,30,25,24,27,26,37,36,39,38,33,32,0,34,45,44,47,46,41,40,43,42,53,52,55,54,49,48,51,50,61,0,63,62,57,56,59,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{88,89,90,91,92,93,94,95,80,81,82,83,84,85,86,87,72,73,74,75,76,77,78,79,64,65,66,67,68,69,70,71,120,121,122,123,124,125,126,127,112,113,114,115,116,117,118,119,104,105,106,107,108,109,110,111,96,97,98,99,100,101,102,103,24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,56,57,58,59,0,61,62,63,48,49,50,51,52,53,54,55,40,41,42,43,44,45,46,47,32,33,34,0,36,37,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,},
                        new byte[]{93,92,95,94,89,88,91,90,85,84,87,86,81,80,83,82,77,76,79,78,73,72,75,74,69,68,71,70,65,64,67,66,125,124,127,126,121,120,123,122,117,116,119,118,113,112,115,114,109,108,111,110,105,104,107,106,101,100,103,102,97,96,99,98,29,28,31,30,25,24,27,26,21,20,23,22,17,16,19,18,13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2,61,0,63,62,57,56,59,58,53,52,55,54,49,48,51,50,45,44,47,46,41,40,43,42,37,36,39,38,33,32,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,60,}


                    };
                byte[] temp = HexToStr(decodepwd);
                int lenght = temp.Length;
                string pwd = "";
                for (byte i = 0; i < lenght; i++)
                {
                    byte wei = (byte)(i % 8);
                    pwd += ((char)data[wei][temp[i]]).ToString();
                }
                result = pwd.Trim();
            }
            catch (Exception)
            {

            }
            return result;
        }
        /// <summary>
        /// 汇付加密
        /// </summary>
        /// <param name="encodepwd"></param>
        /// <returns></returns>
        public static string ChinapnrEncode(string encodepwd)
        {
            string result = "";
            try
            {

                byte[][] data =
                          new byte[][]{
                         new byte[]{253,43,40,41,46,47,44,45,34,35,32,33,38,39,36,37,58,59,56,57,62,63,60,61,50,51,48,49,54,55,52,53,10,11,8,254,14,15,12,13,2,3,0,1,6,7,4,5,26,27,24,25,30,31,28,29,18,19,16,17,255,23,20,21,106,107,104,105,110,111,108,109,98,99,96,97,102,103,100,101,122,123,120,121,126,127,124,125,114,115,112,113,118,119,116,117,74,75,72,73,78,79,76,77,66,67,64,65,70,71,68,69,90,91,88,89,94,95,92,93,82,83,80,81,86,87,84,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,42,41,40,47,46,45,44,35,34,33,32,39,38,37,36,59,58,57,56,63,62,61,60,51,50,49,48,55,54,53,52,11,10,9,254,15,14,13,12,3,2,1,0,7,6,5,4,27,26,25,24,31,30,29,28,19,18,17,16,255,22,21,20,107,106,105,104,111,110,109,108,99,98,97,96,103,102,101,100,123,122,121,120,127,126,125,124,115,114,113,112,119,118,117,116,75,74,73,72,79,78,77,76,67,66,65,64,71,70,69,68,91,90,89,88,95,94,93,92,83,82,81,80,87,86,85,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,48,51,50,53,52,55,54,57,56,59,58,61,60,63,62,33,32,35,34,37,36,39,38,41,40,43,42,45,44,47,46,17,16,19,254,21,20,23,22,25,24,27,26,29,28,31,30,1,0,3,2,5,4,7,6,9,8,11,10,255,12,15,14,113,112,115,114,117,116,119,118,121,120,123,122,125,124,127,126,97,96,99,98,101,100,103,102,105,104,107,106,109,108,111,110,81,80,83,82,85,84,87,86,89,88,91,90,93,92,95,94,65,64,67,66,69,68,71,70,73,72,75,74,77,76,79,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,54,53,52,51,50,49,48,63,62,61,60,59,58,57,56,39,38,37,36,35,34,33,32,47,46,45,44,43,42,41,40,23,22,21,254,19,18,17,16,31,30,29,28,27,26,25,24,7,6,5,4,3,2,1,0,15,14,13,12,255,10,9,8,119,118,117,116,115,114,113,112,127,126,125,124,123,122,121,120,103,102,101,100,99,98,97,96,111,110,109,108,107,106,105,104,87,86,85,84,83,82,81,80,95,94,93,92,91,90,89,88,71,70,69,68,67,66,65,64,79,78,77,76,75,74,73,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,58,57,56,63,62,61,60,51,50,49,48,55,54,53,52,43,42,41,40,47,46,45,44,35,34,33,32,39,38,37,36,27,26,25,254,31,30,29,28,19,18,17,16,23,22,21,20,11,10,9,8,15,14,13,12,3,2,1,0,255,6,5,4,123,122,121,120,127,126,125,124,115,114,113,112,119,118,117,116,107,106,105,104,111,110,109,108,99,98,97,96,103,102,101,100,91,90,89,88,95,94,93,92,83,82,81,80,87,86,85,84,75,74,73,72,79,78,77,76,67,66,65,64,71,70,69,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,68,71,70,65,64,67,66,77,76,79,78,73,72,75,74,85,84,87,86,81,80,83,82,93,92,95,94,89,88,91,90,101,100,103,254,97,96,99,98,109,108,111,110,105,104,107,106,117,116,119,118,113,112,115,114,125,124,127,126,255,120,123,122,5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10,21,20,23,22,17,16,19,18,29,28,31,30,25,24,27,26,37,36,39,38,33,32,35,34,45,44,47,46,41,40,43,42,53,52,55,54,49,48,51,50,61,60,63,62,57,56,59,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,89,90,91,92,93,94,95,80,81,82,83,84,85,86,87,72,73,74,75,76,77,78,79,64,65,66,67,68,69,70,71,120,121,122,254,124,125,126,127,112,113,114,115,116,117,118,119,104,105,106,107,108,109,110,111,96,97,98,99,255,101,102,103,24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,56,57,58,59,60,61,62,63,48,49,50,51,52,53,54,55,40,41,42,43,44,45,46,47,32,33,34,35,36,37,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 new byte[]{253,92,95,94,89,88,91,90,85,84,87,86,81,80,83,82,77,76,79,78,73,72,75,74,69,68,71,70,65,64,67,66,125,124,127,254,121,120,123,122,117,116,119,118,113,112,115,114,109,108,111,110,105,104,107,106,101,100,103,102,255,96,99,98,29,28,31,30,25,24,27,26,21,20,23,22,17,16,19,18,13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2,61,60,63,62,57,56,59,58,53,52,55,54,49,48,51,50,45,44,47,46,41,40,43,42,37,36,39,38,33,32,35,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

                    };
                byte[] temp = ASCIIEncoding.Default.GetBytes(encodepwd);
                int lenght = temp.Length;
                byte[] pwd_temp = new byte[temp.Length];
                for (byte i = 0; i < lenght; i++)
                {
                    byte wei = (byte)(i % 8);
                    pwd_temp[i] = data[wei][temp[i]];
                }
                result = byteToHexStr(pwd_temp);
            }
            catch (Exception)
            {

            }
            return result;
        }

        /// <summary>
        /// DES3Encrypt
        /// </summary>
        /// <param name="data">字符串</param>
        /// <param name="key">key</param>
        /// <returns></returns>
        public static string DES3Encrypt(string data, string key)
        {
            TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();


            MD5CryptoServiceProvider provider2 = new MD5CryptoServiceProvider();
            DES.Key = provider2.ComputeHash(Encoding.ASCII.GetBytes(key));
            DES.Mode = CipherMode.ECB;

            ICryptoTransform DESEncryptor = DES.CreateEncryptor();

            string result = "";
            try
            {
            }
            catch (Exception)
            {

            }
            return result;
        }
        /// <summary>
        /// DES3Decrypt
        /// </summary>
        /// <param name="data">字符串</param>
        /// <param name="key">key</param>
        /// <returns></returns>
        public static string DES3Decrypt(string data, string key)
        {
            TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();


            MD5CryptoServiceProvider provider2 = new MD5CryptoServiceProvider();
            DES.Key = provider2.ComputeHash(Encoding.ASCII.GetBytes(key));
            DES.Mode = CipherMode.ECB;

            ICryptoTransform DESDecrypt = DES.CreateDecryptor();

            string result = "";
            try
            {
                byte[] Buffer = Convert.FromBase64String(data);
                result = ASCIIEncoding.ASCII.GetString(DESDecrypt.TransformFinalBlock(Buffer, 0, Buffer.Length));
            }
            catch (Exception)
            {

            }
            return result;
        }


    }
}